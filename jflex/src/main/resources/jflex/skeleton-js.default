
  /* error codes */
const ZZ_UNKNOWN_ERROR = 0;
const ZZ_NO_MATCH = 1;
const ZZ_PUSHBACK_2BIG = 2;

/* error messages for the codes above */
const ZZ_ERROR_MSG = [
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
];

--- BEGIN FUNC
  var me = this;
  /** This character denotes the end of file */
  var YYEOF = this.YYEOF = -1;

--- private static final int ZZ_BUFFERSIZE = ...;

--- isFinal list
  
  /** the current state of the DFA */
  this.zzState = 0;

  /** the current lexical state */
  this.zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  this.zzBuffer = inputString;

  /** the textposition at the last accepting state */
  this.zzMarkedPos = 0;

  /** the current text position in the buffer */
  this.zzCurrentPos = 0;

  /** startRead marks the beginning of the yytext() string in the buffer */
  this.zzStartRead = 0;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  this.zzEndRead = this.zzBuffer.length;

  /** number of newlines encountered up to the start of the matched text */
  this.yyline = 0;

  /** the number of characters up to the start of the matched text */
  this.yychar = 0;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  this.yycolumn = 0;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  this.zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  this.zzAtEOF = false;

  /** denotes if the user-EOF-code has already been executed */
  this.zzEOFDone = false;

--- user class code

 
--- constructor declaration


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.   
   */
  var zzRefill = function() {
    return true;
  };

    
  /**
   * Closes the input stream.
   */
  var yyclose = this.yyclose = function() {
    me.zzAtEOF = true;            /* indicate end of file */
    me.zzEndRead = me.zzStartRead;  /* invalidate buffer  */ 
    me.zzBuffer = "";
  };


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param inputString   the input string
   */
  var yyreset = this.yyreset = function(inputString) {
    me.zzBuffer = inputString;
    me.zzAtBOL  = true;
    me.zzAtEOF  = false;
    me.zzEOFDone = false;
    me.zzStartRead = 0;
    me.zzEndRead = me.zzBuffer.length;
    me.zzCurrentPos = me.zzMarkedPos = 0;
    me.yyline = me.yychar = me.yycolumn = 0;
    me.zzLexicalState = YYINITIAL;    
  };


  /**
   * Returns the current lexical state.
   */
  var yystate = this.yystate = function() {
    return me.zzLexicalState;
  };


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  var yybegin = this.yybegin = function(newState) {
    me.zzLexicalState = newState;
  };


  /**
   * Returns the text matched by the current regular expression.
   */
  var yytext = this.yytext = function() {    
    return me.zzBuffer.substring(me.zzStartRead,  me.zzMarkedPos);
  };


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  var yycharat = this.yycharat = function(pos) {
    return me.zzBuffer[me.zzStartRead + pos];
  };


  /**
   * Returns the length of the matched text region.
   */
  var yylength = this.yylength = function() {
    return me.zzMarkedPos - me.zzStartRead;
  };


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
--- zzScanError declaration
    var message = ZZ_ERROR_MSG[errorCode];
    if (message == null) {
        message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }    
--- throws clause
  }; 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
--- yypushback decl (contains zzScanError exception)
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    me.zzMarkedPos -= number;
  };


--- zzDoEOF
  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
--- yylex declaration
    var zzInput = 0;
    var zzAction = 0;

    // cached fields:
    var zzCurrentPosL = 0;
    var zzMarkedPosL = 0;
    var zzEndReadL = me.zzEndRead;
    var zzBufferL = me.zzBuffer;
    var zzCMapL = ZZ_CMAP;

--- local declarations

    while (true) {
      zzMarkedPosL = me.zzMarkedPos;

--- start admin (line, char, col count)
      zzAction = -1;

      zzCurrentPosL = me.zzCurrentPos = me.zzStartRead = zzMarkedPosL;
  
--- start admin (lexstate etc)

      zzForAction: {
        while (true) {
    
--- next input, line, col, char count, next transition, isFinal action
            zzAction = me.zzState;
            zzMarkedPosL = zzCurrentPosL;
--- line count update
          }

        }
      }

      // store back cached position
      me.zzMarkedPos = zzMarkedPosL;
--- char count update

--- actions
        default: 
          if (zzInput == YYEOF && me.zzStartRead == me.zzCurrentPos) {
            me.zzAtEOF = true;
--- eofvalue
          } 
          else {
--- no match
          }
      }
    }
  }

--- main
}
